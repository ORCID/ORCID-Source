<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.6.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/security/oauth2 https://raw.githubusercontent.com/spring-attic/spring-security-oauth/main/spring-security-oauth2/src/main/resources/org/springframework/security/oauth2/spring-security-oauth2-2.0.xsd">

	<import resource="classpath*:orcid-oauth2-api-common-config.xml"/>
	
    <sec:http pattern="/static/**" security="none" create-session="stateless" />
	
	<!-- Authenticate the client before reaching the token endpoint -->
    <sec:http pattern="/oauth/token" use-expressions="false" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
    	<sec:csrf disabled="true"/>
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

	<!-- All other authentication will come through this. If a certificate is not found, it will attempt OAuth2 auth -->
    <sec:http use-expressions="true" create-session="stateless">
    	<sec:csrf disabled="true"/>
        <sec:anonymous enabled="true" />
        <sec:x509 subject-principal-regex="CN=(.*?)," user-service-ref="x509UserService"/>
        <sec:intercept-url pattern="/**" access="#oauth2.clientHasRole('ROLE_CLIENT') or #oauth2.clientHasRole('ROLE_PUBLIC') or hasRole('ROLE_SYSTEM') or hasRole('ROLE_USER') or isAnonymous()"/>
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>

	<!-- A simple authentication manager that will attempt to authenticate the client using the X.509 cert -->
    <sec:authentication-manager id="x509AuthenticationManager">
        <sec:authentication-provider ref="x509AuthenticationProvider"/>
    </sec:authentication-manager>
    
    <bean id="x509AuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="x509UserService" />
    </bean>
	
	<!-- A simple hard-coded user service that will pick up the CN from the cert and perform a simple match -->
    <sec:user-service id="x509UserService">
        <sec:user name="ORCID-T1-CLIENT-V1" authorities="ROLE_SYSTEM"/>
    </sec:user-service>

	<!-- Create for the filtering of Oauth2 resources -->
    <oauth2:resource-server id="resourceServerFilter" resource-id="orcid" token-services-ref="tokenServices" entry-point-ref="oauthAuthenticationEntryPoint"/>
	
	<!-- User web expressions to aid the syntax of protection -->
    <oauth2:web-expression-handler id="oauthWebExpressionHandler" />		

	<!-- The authentication manager that wraps the client details user service, that performs a db lookup -->
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider ref="orcidAuthenticationProvider" />
    </sec:authentication-manager>	

	<!-- Add in order for it to be referenced in the filter order -->
	<bean id="clientCredentialsTokenEndpointFilter" class="org.orcid.api.common.security.oauth.OrcidT1Oauth2TokenEndPointFilter">
        <property name="authenticationEntryPoint" ref="oauthAuthenticationEntryPoint"/>
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

	<bean id="orcidAuthenticationProvider" class="org.orcid.core.oauth.OrcidMultiSecretAuthenticationProvider">
		<property name="userDetailsService" ref="clientDetailsUserService" />
	</bean>

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="ORCID T1 API" />
        <property name="typeName" value="Bearer"/>
        <property name="exceptionRenderer" ref="oauthExceptionRenderer"/>
    </bean>	    
         
	<bean id="publicAPISecurityManagerV2" class="org.orcid.api.publicV2.server.security.impl.PublicAPISecurityManagerV2Impl" />
    
    <bean id="publicAPISecurityManagerV3" class="org.orcid.api.publicV3.server.security.impl.PublicAPISecurityManagerV3Impl" />
    
    
    <bean id="apiVersionFilter" class="org.orcid.api.common.filter.ApiVersionFilter" />
    
    <bean id="pubDefaultApiVersionFilter"
		class="org.orcid.api.common.filter.DefaultApiVersionFilter">
		<property name="isPublicApi" value="true" />
	</bean> 
    
    <bean id="clientIdAttributeFilter" class="org.orcid.api.common.filter.ClientIdAttributeFilter" />
    
    
</beans>      