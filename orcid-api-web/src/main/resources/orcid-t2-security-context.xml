<?xml version="1.0" encoding="UTF-8"?>
<!--

    =============================================================================

    ORCID (R) Open Source
    http://orcid.org

    Copyright (c) 2012-2013 ORCID, Inc.
    Licensed under an MIT-Style License (MIT)
    http://orcid.org/open-source-license

    This copyright and license information (including a link to the full license)
    shall be included in its entirety in all copies or substantial portion of
    the software.

    =============================================================================

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

    <!-- Authenticate the client before reaching the token endpoint -->
    <sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <!-- All other authentication will come through this. If a certificate is not found, it will attempt OAuth2 auth -->
    <sec:http use-expressions="true" create-session="stateless">
        <sec:anonymous enabled="false" />
        <sec:x509 subject-principal-regex="CN=(.*?)," user-service-ref="x509UserService"/>
        <sec:intercept-url pattern="/**" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_SYSTEM') or hasRole('ROLE_USER')"/>
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>

    <!-- A simple authentication manager that will attempt to authenticate the client using the X.509 cert -->
    <sec:authentication-manager alias="x509AuthenticationManager">
        <sec:authentication-provider user-service-ref="x509UserService"/>
    </sec:authentication-manager>

    <!-- A simple hard-coded user service that will pick up the CN from the cert and perform a simple match -->
    <sec:user-service id="x509UserService">
        <sec:user name="ORCID-T2-CLIENT-V1" authorities="ROLE_SYSTEM"/>
    </sec:user-service>

    <!-- The authentication manager that wraps the client details user service, that performs a db lookup -->
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService" />
    </sec:authentication-manager>

    <!-- Create for the filtering of Oauth2 resources -->
    <oauth2:resource-server id="resourceServerFilter" resource-id="orcid" token-services-ref="tokenServices" entry-point-ref="oauthAuthenticationEntryPoint"/>

    <!-- User web expressions to aid the syntax of protection -->
    <oauth2:web-expression-handler id="oauthWebExpressionHandler" />
    
    <bean id="jsonpCallbackFilter" class="org.orcid.core.web.filters.JsonpCallbackFilter" />
    
     <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
        <property name ="exceptionRenderer" ref="oauthExceptionRenderer"/>
     </bean>
     
     <bean id="oauthExceptionRenderer" class="org.springframework.security.oauth2.provider.error.DefaultOAuth2ExceptionRenderer">
        <property name="messageConverters">
            <list>            
                <ref bean="orcidJsonMessageConverter"/>
                <ref bean="orcidXmlMessageConverter"/>
            </list>
        </property>
     </bean>
    
    <bean id="orcidJsonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
    <property name="supportedMediaTypes">
            <list value-type="org.springframework.http.MediaType">                
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg type="java.lang.String" value="application"/>
                    <constructor-arg type="java.lang.String" value="json"/>
                </bean>
                <bean class="org.springframework.http.MediaType"> 
                    <constructor-arg type="java.lang.String" value="application"/>
                    <constructor-arg type="java.lang.String" value="orcid+json"/>
                </bean>
                <bean class="org.springframework.http.MediaType"> 
                    <constructor-arg type="java.lang.String" value="application"/>
                    <constructor-arg type="java.lang.String" value="vnd.orcid+json"/>
                </bean>
            </list>
        </property>    
    </bean>
    
    <bean id="orcidXmlMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
    <property name="supportedMediaTypes">
            <list value-type="org.springframework.http.MediaType">
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg type="java.lang.String" value="application"/>
                    <constructor-arg type="java.lang.String" value="xml"/>
                </bean>
                <bean class="org.springframework.http.MediaType"> 
                    <constructor-arg type="java.lang.String" value="application"/>
                    <constructor-arg type="java.lang.String" value="orcid+xml"/>
                </bean>
                <bean class="org.springframework.http.MediaType"> 
                    <constructor-arg type="java.lang.String" value="application"/>
                    <constructor-arg type="java.lang.String" value="vnd.orcid+xml"/>
                </bean>
            </list>
        </property>    
    </bean>
    

    <!-- Add in order for it to be referenced in the filter order -->
    <bean id="clientCredentialsTokenEndpointFilter" class="org.orcid.api.common.security.oauth.OrcidOauth2TokenEndPointFilter">
        <property name="authenticationEntryPoint" ref="oauthAuthenticationEntryPoint"/>
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <!-- Effectively a wrapper around the client details service, converting client to user details -->
    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="orcidClientDetailsService"/>
    </bean>

    <!-- The client details service to use when looking up clients in the db -->
    <bean id="orcidClientDetailsService" class="org.orcid.core.oauth.service.OrcidClientDetailsServiceImpl"/>

    <!-- Use the provided token random token services to actually create the values, and plugin our tokenStore etc -->
    <bean id="tokenServices" class="org.orcid.core.oauth.service.OrcidRandomValueTokenServices">
        <constructor-arg ref="orcidClientDetailsService"/>
        <constructor-arg value="3600"/>
        <constructor-arg value="631138519"/>
        <property name="tokenStore" ref="orcidTokenStore" />
        <property name="supportRefreshToken" value="true" />
    </bean>
    
    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="ORCID T2 API" />
        <property name="typeName" value="Bearer"/>
        <property name="exceptionRenderer" ref="oauthExceptionRenderer"/>
    </bean>
    
    <!-- Use the composite granter to enable granting of tokens for both client credentials and auth codes -->
    <bean id="tokenGranter" class="org.springframework.security.oauth2.provider.CompositeTokenGranter">
        <constructor-arg>
            <list>
                <ref bean="clientCredentialsTokenGranter"/>
                <ref bean="authorizationCodeTokenGranter"/>
                <ref bean="refreshTokenGranter"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- A token granter for the client credentials -->
    <bean id="clientCredentialsTokenGranter" class="org.orcid.core.oauth.OrcidClientCredentialsTokenGranter">
        <constructor-arg ref="tokenServices"/>
        <constructor-arg ref="orcidClientCredentialsChecker"/>
    </bean>

    <bean id="orcidClientCredentialsChecker" class="org.orcid.core.oauth.OrcidClientCredentialsChecker">
        <constructor-arg ref="orcidClientDetailsService"/>
    </bean>

    <!-- The 'granter responsible for returning and removing the auth codes -->
    <bean id="authorizationCodeTokenGranter" class="org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter">
        <constructor-arg ref="orcidAuthorizationCodeService"/>
        <constructor-arg ref="tokenServices"/>
        <constructor-arg ref="orcidClientDetailsService"/>
    </bean>

    <bean id="refreshTokenGranter" class="org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter">
        <constructor-arg ref="tokenServices"/>
        <constructor-arg ref="orcidClientDetailsService"/>
    </bean>

    <!-- An extension of RandomValueAuthorizationCodeServices to create and remove authorisation codes -->
    <bean id="orcidAuthorizationCodeService" class="org.orcid.core.oauth.service.OrcidAuthorizationCodeServiceImpl"/>

    <!-- As we have a Jersey endpoint, we need to create an extension to the Spring MVC, so we use a delegator -->
    <bean id="orcidClientCredentialEndPointDelegator" class="org.orcid.api.t2.server.delegator.impl.OrcidClientCredentialEndPointDelegatorImpl">
        <property name="tokenGranter" ref="tokenGranter"/>
        <property name="clientDetailsService" ref="orcidClientDetailsService"/>
    </bean>

    <bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <property name="tokenServices" ref="tokenServices" />
    </bean>
    
</beans>