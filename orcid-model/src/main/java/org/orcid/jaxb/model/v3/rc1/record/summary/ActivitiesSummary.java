//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.01.18 at 10:32:14 AM GMT 
//

package org.orcid.jaxb.model.v3.rc1.record.summary;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.orcid.jaxb.model.v3.rc1.common.LastModifiedDate;
import org.orcid.jaxb.model.v3.rc1.record.ActivitiesContainer;
import org.orcid.jaxb.model.v3.rc1.record.Activity;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(propOrder = { "lastModifiedDate", "distinctions", "educations", "employments", "fundings", "invitedPositions", "memberships", "peerReviews", "qualifications",
        "services", "works" })
@XmlRootElement(name = "activities-summary", namespace = "http://www.orcid.org/ns/activities")
public class ActivitiesSummary implements Serializable, ActivitiesContainer {

    private static final long serialVersionUID = 1L;
    @XmlElement(name = "last-modified-date", namespace = "http://www.orcid.org/ns/common")
    protected LastModifiedDate lastModifiedDate;
    @XmlElement(name = "distinctions", namespace = "http://www.orcid.org/ns/activities")
    protected Distinctions distinctions;
    @XmlElement(name = "educations", namespace = "http://www.orcid.org/ns/activities")
    protected Educations educations;
    @XmlElement(name = "employments", namespace = "http://www.orcid.org/ns/activities")
    protected Employments employments;
    @XmlElement(name = "fundings", namespace = "http://www.orcid.org/ns/activities")
    protected Fundings fundings;
    @XmlElement(name = "invited-positions", namespace = "http://www.orcid.org/ns/activities")
    protected InvitedPositions invitedPositions;
    @XmlElement(name = "memberships", namespace = "http://www.orcid.org/ns/activities")
    protected Memberships memberships;
    @XmlElement(name = "peer-reviews", namespace = "http://www.orcid.org/ns/activities")
    protected PeerReviews peerReviews;
    @XmlElement(name = "qualifications", namespace = "http://www.orcid.org/ns/activities")
    protected Qualifications qualifications;
    @XmlElement(name = "works", namespace = "http://www.orcid.org/ns/activities")
    protected Works works;
    @XmlElement(name = "services", namespace = "http://www.orcid.org/ns/activities")
    protected Services services;

    @XmlAttribute
    protected String path;

    public Distinctions getDistinctions() {
        return distinctions;
    }

    public void setDistinctions(Distinctions distinctions) {
        this.distinctions = distinctions;
    }

    public InvitedPositions getInvitedPositions() {
        return invitedPositions;
    }

    public void setInvitedPositions(InvitedPositions invitedPositions) {
        this.invitedPositions = invitedPositions;
    }

    public Memberships getMemberships() {
        return memberships;
    }

    public void setMemberships(Memberships memberships) {
        this.memberships = memberships;
    }

    public Qualifications getQualifications() {
        return qualifications;
    }

    public void setQualifications(Qualifications qualifications) {
        this.qualifications = qualifications;
    }

    public Services getServices() {
        return services;
    }

    public void setServices(Services services) {
        this.services = services;
    }

    public Educations getEducations() {
        return educations;
    }

    public void setEducations(Educations educations) {
        this.educations = educations;
    }

    public Employments getEmployments() {
        return employments;
    }

    public void setEmployments(Employments employments) {
        this.employments = employments;
    }

    public PeerReviews getPeerReviews() {
        if (peerReviews == null)
            peerReviews = new PeerReviews();
        return peerReviews;
    }

    public void setPeerReviews(PeerReviews peerReviews) {
        this.peerReviews = peerReviews;
    }

    public Works getWorks() {
        if (works == null)
            works = new Works();
        return works;
    }

    public void setWorks(Works works) {
        this.works = works;
    }

    public Fundings getFundings() {
        if (fundings == null)
            fundings = new Fundings();
        return fundings;
    }

    public void setFundings(Fundings fundings) {
        this.fundings = fundings;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((distinctions == null) ? 0 : distinctions.hashCode());
        result = prime * result + ((educations == null) ? 0 : educations.hashCode());
        result = prime * result + ((employments == null) ? 0 : employments.hashCode());
        result = prime * result + ((invitedPositions == null) ? 0 : invitedPositions.hashCode());
        result = prime * result + ((fundings == null) ? 0 : fundings.hashCode());
        result = prime * result + ((memberships == null) ? 0 : memberships.hashCode());
        result = prime * result + ((peerReviews == null) ? 0 : peerReviews.hashCode());
        result = prime * result + ((qualifications == null) ? 0 : qualifications.hashCode());
        result = prime * result + ((services == null) ? 0 : services.hashCode());
        result = prime * result + ((works == null) ? 0 : works.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ActivitiesSummary other = (ActivitiesSummary) obj;
        if (distinctions == null) {
            if (other.distinctions != null)
                return false;
        } else if (!distinctions.equals(other.distinctions))
            return false;
        if (educations == null) {
            if (other.educations != null)
                return false;
        } else if (!educations.equals(other.educations))
            return false;
        if (employments == null) {
            if (other.employments != null)
                return false;
        } else if (!employments.equals(other.employments))
            return false;
        if (invitedPositions == null) {
            if (other.invitedPositions != null)
                return false;
        } else if (!invitedPositions.equals(other.invitedPositions))
            return false;
        if (fundings == null) {
            if (other.fundings != null)
                return false;
        } else if (!fundings.equals(other.fundings))
            return false;
        if (memberships == null) {
            if (other.memberships != null)
                return false;
        } else if (!memberships.equals(other.memberships))
            return false;
        if (peerReviews == null) {
            if (other.peerReviews != null)
                return false;
        } else if (!peerReviews.equals(other.peerReviews))
            return false;
        if (qualifications == null) {
            if (other.qualifications != null)
                return false;
        } else if (!qualifications.equals(other.qualifications))
            return false;
        if (services == null) {
            if (other.services != null)
                return false;
        } else if (!services.equals(other.services))
            return false;
        if (works == null) {
            if (other.works != null)
                return false;
        } else if (!works.equals(other.works))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return org.orcid.jaxb.model.record.util.RecordUtil.convertToString(this);
    }

    @Override
    public Map<Long, ? extends Activity> retrieveActivitiesAsMap() {
        Map<Long, Activity> activities = new HashMap<>();
        // Set works
        if (works != null) {
            List<WorkGroup> groups = works.getWorkGroup();
            for (WorkGroup work : groups) {
                if (work != null) {
                    List<WorkSummary> summaries = work.getWorkSummary();
                    for (WorkSummary summary : summaries) {
                        activities.put(summary.getPutCode(), summary);
                    }
                }
            }
        }

        // Set peer reviews
        if (peerReviews != null) {
            List<PeerReviewGroup> groups = peerReviews.getPeerReviewGroup();
            for (PeerReviewGroup peerReview : groups) {
                if (peerReview != null) {
                    List<PeerReviewSummary> summaries = peerReview.getPeerReviewSummary();
                    for (PeerReviewSummary summary : summaries) {
                        activities.put(summary.getPutCode(), summary);
                    }
                }
            }
        }

        // Set funding
        if (fundings != null) {
            List<FundingGroup> groups = fundings.getFundingGroup();
            for (FundingGroup funding : groups) {
                if (funding != null) {
                    List<FundingSummary> fundings = funding.getFundingSummary();
                    for (FundingSummary summary : fundings) {
                        activities.put(summary.getPutCode(), summary);
                    }
                }
            }
        }
        // Set education
        if (educations != null) {
            Collection<AffiliationGroup<EducationSummary>> groups = educations.getEducationGroups();
            for (AffiliationGroup<EducationSummary> group : groups) {
                if (group != null) {
                    for (EducationSummary education : group.getActivities()) {
                        activities.put(education.getPutCode(), education);
                    }
                }
            }
        }
        // Set employment
        if (employments != null) {
            Collection<AffiliationGroup<EmploymentSummary>> groups = employments.getEmploymentGroups();
            for (AffiliationGroup<EmploymentSummary> group : groups) {
                if (group != null) {
                    for (EmploymentSummary employment : group.getActivities()) {
                        activities.put(employment.getPutCode(), employment);
                    }
                }
            }
        }

        // Set distinctions
        if (distinctions != null) {
            Collection<AffiliationGroup<DistinctionSummary>> groups = distinctions.getDistinctionGroups();
            for (AffiliationGroup<DistinctionSummary> group : groups) {
                if (group != null) {
                    for (DistinctionSummary distinction : group.getActivities()) {
                        activities.put(distinction.getPutCode(), distinction);
                    }
                }
            }
        }

        // Set invited positions
        if (invitedPositions != null) {
            Collection<AffiliationGroup<InvitedPositionSummary>> groups = invitedPositions.getInvitedPositionGroups();
            for (AffiliationGroup<InvitedPositionSummary> group : groups) {
                if (group != null) {
                    for (InvitedPositionSummary invitedPosition : group.getActivities()) {
                        activities.put(invitedPosition.getPutCode(), invitedPosition);
                    }
                }
            }
        }
        // Set memberships
        if (memberships != null) {
            Collection<AffiliationGroup<MembershipSummary>> groups = memberships.getMembershipGroups();
            for (AffiliationGroup<MembershipSummary> group : groups) {
                if (group != null) {
                    for (MembershipSummary membership : group.getActivities()) {
                        activities.put(membership.getPutCode(), membership);
                    }
                }
            }
        }
        // Set qualifications
        if (qualifications != null) {
            Collection<AffiliationGroup<QualificationSummary>> groups = qualifications.getQualificationGroups();
            for (AffiliationGroup<QualificationSummary> group : groups) {
                if (group != null) {
                    for (QualificationSummary qualification : group.getActivities()) {
                        activities.put(qualification.getPutCode(), qualification);
                    }
                }
            }
        }
        // Set services
        if (services != null) {
            Collection<AffiliationGroup<ServiceSummary>> groups = services.getServiceGroups();
            for (AffiliationGroup<ServiceSummary> group : groups) {
                if (group != null) {
                    for (ServiceSummary service : group.getActivities()) {
                        activities.put(service.getPutCode(), service);
                    }
                }
            }
        }

        return activities;
    }

    @Override
    public List<? extends Activity> retrieveActivities() {
        return new ArrayList<>(retrieveActivitiesAsMap().values());
    }

    public LastModifiedDate getLastModifiedDate() {
        return lastModifiedDate;
    }

    public void setLastModifiedDate(LastModifiedDate lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }
}
